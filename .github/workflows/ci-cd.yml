name: CI/CD Pipeline

on:
  push:
    branches:
      - develop
  pull_request:
    branches:
      - develop

jobs:
  build-backend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up JDK 21
        uses: actions/setup-java@v2
        with:
          distribution: 'temurin'  # Specify the distribution
          java-version: '21'

      - name: Build and Test Backend
        working-directory: ./blueharvest # Ensure this is the correct path to your backend
        run: |
          ./mvnw clean install
          ./mvnw test

      - name: Build Backend
        working-directory: blueharvest
        run: mvn clean install

      - name: Run Unit Tests
        working-directory: blueharvest
        run: mvn test

      - name: Run Integration Tests
        working-directory: blueharvest
        run: mvn verify

  build-frontend:
    runs-on: ubuntu-latest
    needs: build-backend
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '22'

      - name: Install Frontend Dependencies
        working-directory: frontend
        run: npm install

      - name: Build Frontend
        working-directory: frontend
        run: npm run build

      - name: Run Frontend Tests
        working-directory: frontend
        run: npm test -- --watchAll=false

      - name: Copy Build Files to Static Folder
        working-directory: frontend
        run: |
          mkdir -p ../src/main/resources/static
          cp -r build/* ../src/main/resources/static/

  deploy:
    runs-on: ubuntu-latest
    needs: [build-backend, build-frontend]
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      # Set up JDK for deployment if necessary
      - name: Set up JDK 21
        uses: actions/setup-java@v2
        with:
          java-version: '21'

      # Option 1: Deploy to a server using SCP (for example)
#      - name: Deploy Backend to Server
#        env:
#          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
#          SERVER_USER: ${{ secrets.SERVER_USER }}
#          SERVER_IP: ${{ secrets.SERVER_IP }}
#        run: |
#          echo "$SSH_PRIVATE_KEY" > private_key
#          chmod 600 private_key
#          scp -o StrictHostKeyChecking=no -i private_key -r backend/target/*.jar $SERVER_USER@$SERVER_IP:/path/to/deployment/
#
#      # Option 2: Deploy Frontend to a hosting service (like Vercel, Netlify, etc.)
#      - name: Deploy Frontend to Hosting Service
#        env:
#          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
#          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
#        run: |
#          npm install -g netlify-cli
#          netlify deploy --prod --site $NETLIFY_SITE_ID --auth $NETLIFY_AUTH_TOKEN --dir frontend/build

